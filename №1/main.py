import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

# Параметры маятника
L = 9.8         # Длина маятника (м)
A = 5.0         # Амплитуда (м)
omega = 1.0     # Угловая частота (рад/с), соответствует T = 2π с
g = 9.8         # Ускорение свободного падения (м/с²)

# Время
T = 10
t = np.linspace(0, T * 2*np.pi, 2_000)
# 10 периода для анимации
# время от 0 секунд до T * 2pi секунд в количестве 2000 элементов (кадров)


# Функция для вычисления координат маятника
def pendulum_position(t: float) -> tuple: # функция принимает вещественное число и возвращает картеж

    # Горизонтальное смещение координат X
    x = A * np.cos(t)
    # Вертикальное смещение координат Y
    y = -np.sqrt(L**2 - x**2)
    # чтобы груз находился на окружности с радиусом L

    return x, y

# fig — это сокращение от "figure" (фигура), которое представляет собой верхний уровень контейнера,
# содержащего все элементы графика, включая сами подграфики, заголовки, легенды, метки осей и прочее.

# Подграфик (ax) — это отдельная область внутри фигуры (fig), на которой строится конкретный график.
fig, ax = plt.subplots()


# Настройка графика
# методы библиотеки Matplotlib
# set_xlim или set_ylim - используется для установки пределов отображаемых значений по осям X и Y
# set_xlabel и set_xlabel - используется для установки текста по осям X и Y
# set_title - устанавливает название графика
# grid - устанавливает сетку на график
# set_aspect - изменяет соотношение сторон
# 'equal' - установит одинаковое масштабирование по осям x и y
ax.set_xlim(-A - 1, A + 1)
ax.set_ylim(-L - 1, 0.5)
ax.set_xlabel('x (м)')
ax.set_ylabel('y (м)')
ax.set_title('Анимация маятника (T = 2π с)')
ax.grid(True)
ax.set_aspect('equal')  # Равные масштабы по осям


# Элементы маятника
#[] и []: Эти пустые списки используются для передачи координат x и y соответственно.
# Поскольку оба списка пусты, график изначально не имеет никаких точек

line, = ax.plot([], [], 'b-', lw=2)  # Нить маятника
# 'b-': Этот строковый аргумент определяет тип и цвет.
#    "b" обозначает синий цвет ("blue").
#    "-" обозначает сплошную линию
# Аргумент lw устанавливает толщину линии

bob, = ax.plot([], [], 'ro', ms=10)  # Груз маятника
#    "r" — красный цвет (red).
#    "o" — круглая форма маркера (circle).
# Аргумент ms (marker size) задает размер маркера

pivot = ax.plot(0, 0, 'k^', ms=10)  # Точка подвеса
#    "k" — черный цвет (black).
#    "^" — треугольный маркер, направленный верх.


# Инициализация анимации
# Функция init() выполняется один раз в самом начале анимации и предназначена для начальной конфигурации объектов
def init() -> tuple:
    # Метод set_data([]) очищает текущие данные линии и маркера
    line.set_data([], [])
    bob.set_data([], [])
    return line, bob
# Функция возвращает кортеж двух объектов (line и bob),
# которые участвуют в анимации.
# Именно эти объекты будут повторно обновляться на каждом следующем кадре.


# Функция обновления анимации
def update(t: float) -> tuple:
    x, y = pendulum_position(t)     # наша функция
    line.set_data([0, x], [0, y])   # Обновляем нить (от точки подвеса до груза)
    bob.set_data([x], [y])          # Обновляем груз
    return line, bob


# Создание анимации
ani = FuncAnimation(fig, update, frames=t, init_func=init, blit=True, interval=1000 * t[-1] / len(t))
# fig - Объект на которой будет происходить анимация
# update - функция update(обновления)
# frames=t -Массив(в нашем случае) или генератор, задающий последовательность шагов анимации.
#   массив t, который хранит временные моменты (шаг времени).
#   Каждая итерация цикла анимации будет брать следующий элемент из этого массива.
# init_func=init - функция init вызывается один раз
# blit=True - оптимизации перерисовки
# interval - Интервал между кадрами анимации в миллисекундах.
# выражение рассчитывается средняя продолжительность одного кадра на основе последнего
# временного шага (t[-1]) и количества временных шагов (len(t))
# То есть общая длительность анимации составляет примерно
# последний временной шаг, равномерно распределенный на число кадров

# Показать анимацию
plt.show()